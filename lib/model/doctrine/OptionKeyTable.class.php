<?php

/**
 * OptionKeyTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class OptionKeyTable extends Doctrine_Table
{

    protected static $supported_option_keys = array(
        "site_brand_name"                          => array("help" => "Displayed text in header and footer"),

        "google_analytics_enabled" => array(
            "widget"            => "sf_widget_form_choice",
            "widget_options"    => array(
                "choices" => array(
                    "1" => "enabled",
                    "0" => "disabled"
                )
            ),
            "validator"         => "sf_validator_choice",
            "validator_options" => array(
                "choices" => "@widget_choices",
                "required" => false
            ),
            "help" => "Is Google Analytics report enabled?"
        ),
        "google_analytics_ua_code" => array(
            "help" => "Format: UA-XXXXXX-X"
        ),

        "index_slug_contact"                    => array("help" => "Example: kapcsolat-es-ajanlatkeres"),
        "index_slug_gallery"                    => array("help" => "Example: galeriak-es-kepeink"),
        "index_slug_faq"                        => array("help" => "Example: gyakori-kerdesek-a-foobarral-kapcsolatban"),
        "index_slug_blog_entry"                 => array("help" => "Example: blog"),
        "index_slug_team_member"                => array("help" => "Example: team_member"),
        "index_slug_service"                    => array("help" => "Example: service"),
        "index_slug_reference"                  => array("help" => "Example: reference"),

        "mail_contact_subject"                  => array("help" => ""),
        "mail_contact_address"                  => array("help" => ""),
        "mail_noreply_address"                  => array("help" => ""),

        "contact_email_address_1"                  => array("help" => ""),
        "contact_phone_1"                          => array("help" => ""),
        "contact_address_1"                        => array("help" => ""),
        "contact_map_html_1"                       => array("help" => ""),

        "organization_name"                        => array("help" => ""),
        "organization_main_office"                 => array("help" => ""),
        "organization_company_registration_number" => array("help" => ""),
        "organization_company_tax_number"           => array("help" => ""),

        "i18n_available_cultures"                  => array("help" => "en,hu,de"),
        "i18n_available_cultures_default"          => array("help" => "hu"),

        "social_facebook_page"                     => array("help" => ""),
        "social_twitter_page"                      => array("help" => ""),
        "social_pinterest_page"                    => array("help" => ""),

        "social_addthis_enabled"                   => array(
            "widget"            => "sf_widget_form_choice",
            "widget_options"    => array(
                "choices" => array(
                    "1" => "enabled",
                    "0" => "disabled"
                )
            ),
            "validator"         => "sf_validator_choice",
            "validator_options" => array(
                "choices" => "@widget_choices",
                "required" => false
            ),
            "help" => "Is Addthis app enabled?"
        ),
        "social_addthis_app_id"                   => array("help" => ""),

        "seo_html_title" => array("help" => "Default 'title' tag content"),
        "seo_meta_title" => array("help" => "Default 'meta' title content"),
        "seo_meta_description" => array("help" => "Default 'meta' description content"),
        "seo_meta_robots" => array(
            "widget"            => "sf_widget_form_choice",
            "widget_options"    => array(
                "choices" => array(
                    //GENERALSEOHELPER VALUES!
                    "0" => "noindex, nofollow",
                    "1" => "noindex, follow",
                    "2" => "index, nofollow",
                    "3" => "index, follow"
                )
            ),
            "validator"         => "sf_validator_choice",
            "validator_options" => array(
                "choices" => "@widget_choices",
                "required" => false
            ),
            "help" => "Default 'meta' robots content"
        ),
        "robots_txt"                   => array(
            "widget"            => "sf_widget_form_choice",
            "widget_options"    => array(
                "choices" => array(
                    "1" => "allow_all",
                    "2" => "deny_all",
                )
            ),
            "validator"         => "sf_validator_choice",
            "validator_options" => array(
                "choices" => "@widget_choices",
                "required" => false
            ),
            "help" => "Enable or Disable Bot crawling in robots.txt"
        ),
        "seo_geo_title"                => array(
            "help" => "Seo GeoTag Title, see at: http://www.geo-tag.de/generator/en.html (for example: LoremIpsum Company)"
        ),
        "seo_geo_region"               => array(
            "help" => "Seo GeoTag Region, see at: http://www.geo-tag.de/generator/en.html (for example: HU-BU)"
        ),
        "seo_geo_placename"            => array(
            "help" => "Seo GeoTag Placename, see at: http://www.geo-tag.de/generator/en.html (for example: Budapest)"
        ),
        "seo_geo_position_lat"         => array(
            "help" => "Seo GeoTag Latitude, see at: http://www.geo-tag.de/generator/en.html (for example: 47.50772)"
        ),
        "seo_geo_position_lng"         => array(
            "help" => "Seo GeoTag Longitude, see at: http://www.geo-tag.de/generator/en.html (for example: 19.02499)"
        ),
        "sitemap_enabled"              => array(
            "widget"            => "sf_widget_form_choice",
            "widget_options"    => array(
                "choices" => array(
                    "1" => "enabled",
                    "0" => "disabled",
                )
            ),
            "validator"         => "sf_validator_choice",
            "validator_options" => array(
                "choices" => "@widget_choices",
                "required" => false
            ),
            "help" => "Enable or Disable Sitemap generator and visibility in robots.txt"
        ),
        "contact_has_attachment"                   => array(
            "widget"            => "sf_widget_form_choice",
            "widget_options"    => array(
                "choices" => array(
                    "1" => "yes",
                    "2" => "no",
                )
            ),
            "validator"         => "sf_validator_choice",
            "validator_options" => array(
                "choices" => "@widget_choices",
                "required" => false
            ),
            "help" => "Enable or Disable Attachments in Contact forms"
        ),
    );

    protected static $editable_option_keys = array();

    public static function getSupportedOptionKey($key){
        if(isset(self::$supported_option_keys[$key])){
            return self::$supported_option_keys[$key];
        }
        return null;
    }
    public static function getSupportedOptionKeys(){
        $supported_option_keys = self::$supported_option_keys;
        $list = array();
        foreach($supported_option_keys as $key => $supported_option_key){
            $list[] = $key;
        }
        return $list;
    }

    public static function getWidgetFor($key){

        $widget = null;

        if(in_array($key, self::getEditableOptionKeys())) {

            $s = self::getSupportedOptionKey($key);

            if(isset($s["widget"])){
                #Project::prePrint($s);
                $widget_options = array();
                if(isset($s["widget_options"])){
                    $widget_options = $s["widget_options"];
                }
                if($s["widget"] == "sf_widget_form_choice"){
                    $widget = new sfWidgetFormChoice($widget_options);
                } else if($s["widget"] == "sf_widget_form_textarea"){
                    $widget = new sfWidgetFormTextarea($widget_options);
                }


            }

        }

        if(is_null($widget)) {
            $widget = new sfWidgetFormInput();
        }

        return $widget;
    }

    public static function getWidgetOptionsChoices($key){

        $widget_option_choices = array();
        if(in_array($key, self::getEditableOptionKeys())) {
            $s = self::getSupportedOptionKey($key);
            if(isset($s["widget_options"]) && isset($s["widget_options"]["choices"])){
                $widget_option_choices = $s["widget_options"]["choices"];
            }
        }

        return $widget_option_choices;
    }

    public static function getHelpFor($key){
        $help = null;
        if(in_array($key, self::getEditableOptionKeys())) {
            $s = self::getSupportedOptionKey($key);
            if($key == "site_language"){
                #Project::prePrint($s);
            }
            if(isset($s["help"])){
                $help = $s["help"];
            }
        }
        #echo $help;
        return $help;
    }

    public static function getValidatorFor($key){
        $validator = null;

        if(in_array($key, self::getEditableOptionKeys())){
            $s = self::getSupportedOptionKey($key);
            if($key == "blog_entries_per_day"){
                #Project::prePrint($s);
            }

            if (isset($s["validator"])) {
                $validator_options = array();
                if(isset($s["validator_options"])){
                    $validator_options = $s["validator_options"];
                    if(isset($s["validator_options"]["choices"]) && ($s["validator_options"]["choices"] == "@widget_choices")){
                        $validator_options["choices"] = array_keys(self::getWidgetOptionsChoices($key));
                    }
                }
                if($s["validator"] == "sf_validator_choice"){
                    $validator = new sfValidatorChoice($validator_options);
                } elseif ($s["validator"] == "sf_validator_integer") {
                    $validator = new sfValidatorInteger($validator_options);
                }
                #Project::prePrint($validator_options);
            }

        }

        if(is_null($validator)){
            $validator = new sfValidatorPass();
        }
        return $validator;
    }

    public static function getEditableOptionKeys(){
        $array = self::getSupportedOptionKeys();
        /*$final = array();
        foreach($array as $a){
            if($a == "site_logo"){
                continue;
            }
            else{
                $final[] = $a;
            }
        }*/
        return $array;
    }

    public static function getOptionkeyByName($option_name){
        $optionkey = self::getInstance()->createQuery('o')
            ->andWhere("o.name = ?",$option_name)
            ->limit(1)
            ->fetchOne();

        return $optionkey;
    }

    /**
     * Returns an instance of this class.
     *
     * @return OptionKeyTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('OptionKey');
    }
}