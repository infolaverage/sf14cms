<?php

/**
 * Site
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    s14cms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Site extends BaseSite
{

    public static $site_object;
    public static $site_settings;
    public static $cms_with_roles;


    public function getSiteMenuTreeByType($type = null){
        $menu = null;
        $setting = null;
        if($type == "top"){
            $setting = "site_menu_top_id";
        }
        if($type == "footer"){
            $setting = "site_menu_footer_id";
        }

        $ss_id = $this->getCurrentSiteSetting($setting);
        if($ss_id){
            $menu = SiteMenuTable::getSiteMenuTreeByRootId($this->id, $ss_id);
        }
        return $menu;
    }

    public function getFinalName(){
        return $this->getName();
    }


    public function getFinalSettingContactHasAttachment(){
        $val = $this->getCurrentSiteSetting("contact_has_attachment");
        $ret_val = ($val == 1) ? true : false;
        return $ret_val;
    }

    public function getFinalSettingMailContactAddresses(){
        $val_string = $this->getCurrentSiteSetting("mail_contact_address");
        $val_array = explode(";", $val_string);
        $val_final = array();
        foreach($val_array as $va){
            if(trim($va)){
                $val_final[] = trim($va);
            }
        }

        return $val_final;
    }

    public function getFinalSettingMailContactSubject(){
        $val = $this->getCurrentSiteSetting("mail_contact_subject");
        if(!$val){
            $val = $this->getFinalName()." contact mail received";
        }
        return $val;
    }

    public function getFinalSettingMailNoreplyAddress(){
        $val_string = $this->getCurrentSiteSetting("mail_noreply_address");
        $val = ($val_string) ? trim($val_string) : "noreply@noreply.com";

        return $val;
    }


    public function getFinalContactUploadDir($pre = false){
        $upload_dir_parts = array();

        if($pre){
            $upload_dir_parts[] = "";
        }
        $upload_dir_parts[] = "uploads";
        $upload_dir_parts[] = sfConfig::get('app_contact_attachmentsFileWebDir');
        $upload_dir_parts[] = $this->getId();

        $upload_dir = implode(DIRECTORY_SEPARATOR, $upload_dir_parts);

        return $upload_dir;
    }

    public function getFinalContactUploadPath(){

        $upload_dir_parts = array();
        $upload_dir_parts[] = sfConfig::get('app_contact_attachmentsFileWebDir');
        $upload_dir_parts[] = $this->getId();
        $upload_dir = implode(DIRECTORY_SEPARATOR, $upload_dir_parts);

        return sfConfig::get('sf_upload_dir').DIRECTORY_SEPARATOR.$upload_dir;
    }


    public function getFinalSettingAddThisEnabled(){
        $enabled = false;
        if($this->getCurrentSiteSetting("social_addthis_enabled") == true){
            $enabled = true;
        }
        return $enabled;
    }

    public function getFinalSettingAddThisAppId(){
        $code = false;
        if($this->getCurrentSiteSetting("social_addthis_app_id")){
            $code = $this->getCurrentSiteSetting("social_addthis_app_id");
        }
        return $code;
    }


    public function getFinalSettingGoogleAnalyticsEnabled(){
        $enabled = false;
        if($this->getCurrentSiteSetting("google_analytics_enabled") == true){
            $enabled = true;
        }
        return $enabled;
    }

    public function getFinalSettingGoogleAnalyticsUaCode(){
        $code = false;
        if($this->getCurrentSiteSetting("google_analytics_ua_code")){
            $code = $this->getCurrentSiteSetting("google_analytics_ua_code");
        }
        return $code;
    }


    public function getFinalIndexSlug($type){

        //$slug = "i-slug";
        $s_key = "index_slug_".$type;
        if($this->getCurrentSiteSetting($s_key)){
            $slug = $this->getCurrentSiteSetting($s_key);
        } else {
            //$slug = $s_key;
            $slug = "i_".$type;
        }

        return $slug;
    }


    public function getSitemapDirectory($check = true){
        $dir_parts = array(
            sfConfig::get('sf_web_dir'),
            'sitemap',
            $this->getId()
        );
        $dir = implode(DIRECTORY_SEPARATOR, $dir_parts).DIRECTORY_SEPARATOR;
        if($check && !is_dir($dir)){
            return false;
        }

        return  $dir;
    }

    public function getFinalSettingSitemapEnabled(){
        $enabled = false;
        if($this->getCurrentSiteSetting("sitemap_enabled") == 1){
            $enabled = true;
        }
        return $enabled;
    }

    public function getAvailableCultures(){
        $s = $this->getCurrentSiteSetting("i18n_available_cultures");
        $array = array();
        if ($s) {
            $s = trim(strtolower($s));
            $array = explode(",", $s);
        }

        return $array;
    }

    public function getAvailableCulturesDefault(){
        $s = $this->getCurrentSiteSetting("i18n_available_cultures_default");
        if(in_array($s,$this->getAvailableCultures())){
            return $s;
        }
        return "en";
    }



    public function getFinalNavbarBrandImgLink(){
        $base = "/resources/site/%site_id%/images/content/navbar_brand.png";
        $site_spec = str_replace("%site_id%", $this->getId(), $base);
        $path = sfConfig::get("sf_web_dir").$site_spec;
        if(file_exists($path)){
            return $site_spec;
        }
        return null;


    }

    public function getFinalContactPhones(){
        $s = $this->getCurrentSiteSetting("contact_phone_1");
        $s_exploded = explode(";", $s);
        $s_ret = [];
        foreach($s_exploded as $s_item){
            $s_ret[] = trim($s_item);
        }
        return $s_ret;
    }

    /**
     * Depircated! Do not use!
     * @return array
     */
    public function getFinalContactEmailAddresses(){
        return $this->getFinalSettingMailContactAddresses();
        /*
        $s = $this->getCurrentSiteSetting("contact_email_address_1");
        $s_exploded = explode(";", $s);
        $s_ret = [];
        foreach($s_exploded as $s_item){
            $s_ret[] = trim($s_item);
        }
        return $s_ret;*/
    }
    //...

    /** SEO Methods */
    /**
     * Returns object raw meta settings
     * @return array
     */
    public function getFinalObjectMetaParams(){
        $metas = array();
        $metas["meta_title"]        = $this->getCurrentSiteSetting("seo_meta_title");
        $metas["html_title"]        = $this->getCurrentSiteSetting("seo_html_title");
        $metas["meta_description"]  = $this->getCurrentSiteSetting("seo_meta_description");
        //$metas["meta_keywords"]   = $this->getMetaKeywords();
        $metas["meta_robots"]       = $this->getFinalMetaRobots();

        return $metas;
    }//end getFinalObjectMetaParams()

    /**
     * @return mixed
     */
    public function getFinalMetaRobots(){
        $value = $this->getCurrentSiteSetting("seo_meta_robots");
        $tr = GeneralSeoHelper::getMetaRobotValueByKey($value);

        return $tr;
    }

    /**
     * Check and return true if all settings filled for same language
     * @param null $lang
     * @return bool
     */
    public function hasAllGeoSettings($lang = null) {
        $keys = Project::getGeoSettingKeys();
        foreach($keys as $key) {
            $site_setting = $this->getCurrentSiteSetting($key);
            if (!$site_setting) {
                return false;
            }
        }

        return true;
    }//end hasAllGeoSettings()

    /**
     * Get all Geo Meta Settings
     * @return array
     */
    public function getGeoSettings(){
        $meta_geocode = array();
        $keys = Project::getGeoSettingKeys();
        foreach($keys as $key) {
            //$site_setting = SiteSettingTable::getSettingValueForSite($this->id, $key, $lang);
            $site_setting = $this->getCurrentSiteSetting($key);
            if($site_setting){
                $meta_geocode[$key] = $site_setting;
            }
        }
        return $meta_geocode;
    }//end getGeoSettings()
    /*******************************************************************************************************************/

    /** CMS Objects */
    public function getCmsObject($role) {

        $role_key = CmsTable::getRoleOptionKey($role);

        //Check in static
        if (isset(self::$cms_with_roles[$this->id][$role_key])) {
            return self::$cms_with_roles[$this->id][$role_key];
        }
        self::$cms_with_roles = $this->getCmsObjects();

        //Is in static?
        if (isset(self::$cms_with_roles[$this->id][$role_key])) {
            return self::$cms_with_roles[$this->id][$role_key];
        }

        $object = CmsTable::getActiveEntityBySiteAndRole($this->id, $role);
        return $object;
    }
    public function getCmsObjects(){
        $objects = CmsTable::getActiveEntitiesBySiteWithRoles($this->id);
        $cms_objects = array();
        foreach($objects as $object){
            if($object->getRole()){
                $cms_objects[$this->id][$object->getRole()] = $object;
            }
        }

        return $cms_objects;
    }
    public function setCmsObject($role = null, $value = null){
        if(is_null($role)){
            return null;
        }

        //cms existed
        /**
         * @var Cms $cms
         */
        $cms = CmsTable::getEntityBySiteIdAndRoleId($this->id, $role);
        if($cms && $cms->getContent() == $value){
            return null;
        }
        $have_to_save = false;

        //HA ÚJ
        if (!$cms) {
            $cms = new Cms();
            $cms->setRole($role);
            $cms->setSiteId($this->getId());
            $cms->setContent($value);
            $cms->setIsActive(true);
            $have_to_save = true;
        } else {
            //HA Más a content
            if($cms->getContent() != $value){
                $cms->setContent($value);
                //$cms->setIsActive(true);
                $have_to_save = true;
            }
        }

        if($have_to_save){
            try {
                $cms->save();
                return $cms;
            } catch (sfException $e){}
        }

        return null;
    }

    /*******************************************************************************************************************/
    /** Site Settings */
    public function getDefaultSiteSettingYml($key, $lang = null){
        $values = sfConfig::get("app_site_setting");
        #Project::prePrint($values); exit;
        if (isset($values[$key])) {
            return $values[$key];
        } else {
            return null;
        }
    }
    /**
     * Get Current Site Setting
     * @param $key - ex: "site_theme"
     * @param null $lang
     * @return mixed
     */
    public function getCurrentSiteSetting($key, $lang = null) {
        $lang_key = $lang;

        if (is_null($lang)) {
            $lang_key = "all";
        }

        //Is in static?
        if (isset(self::$site_settings[$this->id][$key][$lang_key])) {
            return self::$site_settings[$this->id][$key][$lang_key];
        }
        //Try to get all
        self::$site_settings = $this->getCurrentSiteSettings($lang_key);

        //Is in static?
        if (isset(self::$site_settings[$this->id][$key][$lang_key])) {
            return self::$site_settings[$this->id][$key][$lang_key];
        }

        // Site dependent site_setting
        $value = SiteSettingTable::getSettingValueForSite($this->id, $key, $lang);
        if (!$value) {
            //if ($key == "highlight.number_of_days") {
            //    $value = sfConfig::get("app_settings_default_highlight_days", "35");
            //}
            // General site_setting
            $value = SiteSettingTable::getSettingValueForSite(null, $key, $lang);
        }
        //App.yml site_setting
        if (!$value) {
            if($key == "max_per_page_blog_entry"){
                $value = self::getDefaultSiteSettingYml($key);
                if(!$value){
                    $value = 5;
                }
            }
            if($key == "contact_index_slug"){
                $value = self::getDefaultSiteSettingYml($key);
                if(!$value){
                    $value = "contact";
                }
            }
            /*
            if($key == "blog_entries_per_day"){
                $value = self::getDefaultSiteSettingYml($key);
            }
            if($key == "blog_entry_max_image"){
                $value = self::getDefaultSiteSettingYml($key);
            }
            if($key == "sitemap_enabled"){
                $value = self::getDefaultSiteSettingYml($key);
            }
            */

        }
        //Project::prePrint(self::$site_settings, 1);
        self::$site_settings[$this->id][$key][$lang_key] = $value;
        return self::$site_settings[$this->id][$key][$lang_key];

    }//end getCurrentSiteSetting()
    public function getCurrentSiteSettings($lang_key = "all"){
        $all_settings = SiteSettingTable::getSiteSettingsBySiteAsArray($this->getId(), $lang_key);
        return $all_settings;
    }
    public function setCurrentSiteSetting($key = null, $value = null, $overwrite = true, $lang = null){
        if(is_null($key)){
            return null;
        }

        //get option key
        $option_key_existed = OptionKeyTable::getOptionkeyByName($key);

        if($option_key_existed){
            $site_setting_existed = SiteSettingTable::siteSettingExist($this->id, $option_key_existed->id);
            $current_setting = SiteSettingTable::getSiteSettingBySiteAndOptionKey($this->id, $option_key_existed->id);
            //get site setting
            if ($site_setting_existed && count($current_setting)) {
                //exist ? overwrite : ...
                if($overwrite){
                    foreach($current_setting as $site_setting){
                        /**
                         * @var SiteSetting $current_s
                         */
                        $site_setting->setSValue($value);
                        try {
                            $site_setting->save();
                        } catch(Exception $e) {
                            echo $e; exit;
                        }
                        //TODO : multiple !
                    }
                }
            } else {
                //exist ? ... : createnew
                $site_setting_object = new SiteSetting();
                $site_setting_object->setSite($this);
                $site_setting_object->setOptionKey($option_key_existed);
                $site_setting_object->setSValue($value);
                $site_setting_object->setIsActive(1);
                $site_setting_object->setPriority(1);
                $site_setting_object->save();

                return $site_setting_object;
            }
        } else {
            //throw error?
        }

        return null;
    }
    /*******************************************************************************************************************/
    /** GET CURRENTS */
    /**
     * Retrieve the current site object depending on request domain
     * @return Doctrine_Record|mixed|null|Site
     * @throws sfException
     */
    public static function getCurrent() {

        //if(self::$site_object){
        //    Project::prePrint("getCurrent() exist");
        //}
        //Project::prePrint("getCurrent() called");
        $debug = false;
        $domain_name_full = Project::getDomainName(true);
        if (!self::$site_object) {

            try {
                if (!$domain_name_full) {
                    if($debug){ echo "nadf.001"; }
                    Project::throwException('exception.no-active-domain-found.001');
                }
                self::$site_object = SiteTable::findByDomain($domain_name_full);
                if (!self::$site_object) {
                    if($debug){ echo "nadf.002"; }
                    Project::throwException('exception.no-active-domain-found.002');
                }
            } catch (Exception $e) {
                if (strpos($domain_name_full, "www.")) {
                    $n = str_replace("www.", "", $domain_name_full);
                    if($debug){ echo "nadf.www"; }
                    self::$site_object = SiteTable::findByDomain($n);
                } else {
                    $n = str_replace("http://", "http://www.", $domain_name_full);
                    if($debug){ echo "nadf.http://www."; }
                    self::$site_object = SiteTable::findByDomain($n);
                }
                if (!self::$site_object) {
                    if($debug){ echo "nadf.003"; }
                    Project::throwException(
                        'exception.no-active-domain-found.003',
                        array(
                            "request" => $domain_name_full
                        )
                    );
                }
            }
            //if (!self::$site_object || !self::$site_object->getIsActive()) {
            //    if($debug){ echo "nadf.004"; }
            //    Project::throwException('exception.no-active-domain-found.004', array());
            //}

        }

        return self::$site_object;
    }
    /*******************************************************************************************************************/

    public function getDomainsAvailable(){
        $domains = array();
        $prod_domains = array();
        $prod_domains[] = $this->getDomain();
        $prod_domain_aliases = explode(",", preg_replace('/\s+/', '', $this->domain_alias));
        foreach ($prod_domain_aliases as $prod_domain_alias) {
            if (strlen($prod_domain_alias) > 3) {
                $prod_domains[] = $prod_domain_alias;
            }
        }
        $dev_domains = array();
        $dev_domains[] = $this->getDomainDev();
        $dev_domain_aliases = explode(",", preg_replace('/\s+/', '', $this->domain_dev_alias));
        foreach ($dev_domain_aliases as $dev_domain_alias) {
            if (strlen($dev_domain_alias) > 3) {
                $dev_domains[] = $dev_domain_alias;
            }
        }
        $domains["prod"] = $prod_domains;
        $domains["dev"] = $dev_domains;

        return $domains;
    }

    public function getCurrentDomainOn($type = "prod") {
        $available_envs = array("prod", "dev");
        if (in_array($type, $available_envs)) {
            $domains_available = Site::getCurrent()->getDomainsAvailable();
            $final_domain_is_ok = ((in_array(Project::getDomainName(true), $domains_available[$type])));
            if ($final_domain_is_ok) {
                return true;
            }
        }

        return false;
    }



}
