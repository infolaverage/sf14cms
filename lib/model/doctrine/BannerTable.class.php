<?php

/**
 * BannerTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BannerTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return BannerTable The table instance
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Banner');
    }

    public static $display_type_choices = array(
        "1" => "openpage-slider",
        "2" => "column-banner",
        "3" => "column-banner-2",
        "4" => "column-banner-3",
        //"5" => "column-alternate",
    );

    /**
     * @return array Returns $display_type_choices
     */
    public static function getDisplayTypeChoices() {
        return self::$display_type_choices;
    }//end getTypeChoices()

    public static function getDisplayTypeChoiceValueByKey($key = -1) {
        $a =  self::getDisplayTypeChoices();
        if(isset($a[$key])){
            return $a[$key];
        }
        return null;
    }//end getTypeChoices()

    /**
     * Returns the active Banner objects by type and id.
     *
     * @param string $type Banner type
     * @param int $site_id Site id
     * @param Doctrine_Query $q
     *
     * @return Doctrine_Collection|null Returns the set of Banner objects (or null if type or site_id not exists)
     */
    public static function getActiveEntitiesByTypeAndSiteId($type, $site_id, Doctrine_Query $q = null) {
        if(!$type || !$site_id) {
            return null;
        }

        $query = self::addActiveEntitiesQuery($q);
        $root_alias = $query->getRootAlias();

        $query
            ->andWhere($root_alias.".display_type = ?", $type)
            ->andWhere($root_alias.".site_id = ?", $site_id);

        $result = $query
            ->execute();

        return $result;
    }//end getActiveEntitiesByTypeAndSiteId()

    /**
     * Retrieves the base query of active entities, overridden in concrete table classes.
     *
     * @param Doctrine_Query $q
     *
     * @return Doctrine_Query | null
     */
    public static function addActiveEntitiesQuery(Doctrine_Query $q = null) {
        if (is_null($q))
        {
            $q = self::getInstance()->createQuery("e");
        }

        $root_alias = $q->getRootAlias();
        $q
            ->andWhere($root_alias.".is_active = ?", true)
            ->addOrderBy($root_alias.".position");

        return $q;
    }//end addActiveEntitiesQuery()

    public static function retrieveBackendEntityList(){

        $q = self::getInstance()->createQuery("a")
            ->addOrderBy("site_id asc")
            ->addOrderBy("display_type asc")
            ->addOrderBy("position asc")
            ;
        return $q;


    }

}