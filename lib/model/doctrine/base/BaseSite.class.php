<?php

/**
 * BaseSite
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $domain
 * @property clob $domain_alias
 * @property string $domain_dev
 * @property clob $domain_dev_alias
 * @property boolean $is_active
 * @property boolean $is_demo
 * @property Doctrine_Collection $Cmss
 * @property Doctrine_Collection $Newss
 * @property Doctrine_Collection $Quotes
 * @property Doctrine_Collection $Banners
 * @property Doctrine_Collection $SiteMenus
 * @property Doctrine_Collection $Contacts
 * @property Doctrine_Collection $SiteSettings
 * @property Doctrine_Collection $SiteTransUnits
 * 
 * @method string              getName()             Returns the current record's "name" value
 * @method string              getDomain()           Returns the current record's "domain" value
 * @method clob                getDomainAlias()      Returns the current record's "domain_alias" value
 * @method string              getDomainDev()        Returns the current record's "domain_dev" value
 * @method clob                getDomainDevAlias()   Returns the current record's "domain_dev_alias" value
 * @method boolean             getIsActive()         Returns the current record's "is_active" value
 * @method boolean             getIsDemo()           Returns the current record's "is_demo" value
 * @method Doctrine_Collection getCmss()             Returns the current record's "Cmss" collection
 * @method Doctrine_Collection getNewss()            Returns the current record's "Newss" collection
 * @method Doctrine_Collection getQuotes()           Returns the current record's "Quotes" collection
 * @method Doctrine_Collection getBanners()          Returns the current record's "Banners" collection
 * @method Doctrine_Collection getSiteMenus()        Returns the current record's "SiteMenus" collection
 * @method Doctrine_Collection getContacts()         Returns the current record's "Contacts" collection
 * @method Doctrine_Collection getSiteSettings()     Returns the current record's "SiteSettings" collection
 * @method Doctrine_Collection getSiteTransUnits()   Returns the current record's "SiteTransUnits" collection
 * @method Site                setName()             Sets the current record's "name" value
 * @method Site                setDomain()           Sets the current record's "domain" value
 * @method Site                setDomainAlias()      Sets the current record's "domain_alias" value
 * @method Site                setDomainDev()        Sets the current record's "domain_dev" value
 * @method Site                setDomainDevAlias()   Sets the current record's "domain_dev_alias" value
 * @method Site                setIsActive()         Sets the current record's "is_active" value
 * @method Site                setIsDemo()           Sets the current record's "is_demo" value
 * @method Site                setCmss()             Sets the current record's "Cmss" collection
 * @method Site                setNewss()            Sets the current record's "Newss" collection
 * @method Site                setQuotes()           Sets the current record's "Quotes" collection
 * @method Site                setBanners()          Sets the current record's "Banners" collection
 * @method Site                setSiteMenus()        Sets the current record's "SiteMenus" collection
 * @method Site                setContacts()         Sets the current record's "Contacts" collection
 * @method Site                setSiteSettings()     Sets the current record's "SiteSettings" collection
 * @method Site                setSiteTransUnits()   Sets the current record's "SiteTransUnits" collection
 * 
 * @package    s14cms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSite extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('site');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('domain', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('domain_alias', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('domain_dev', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('domain_dev_alias', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('is_demo', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Article as Cmss', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $this->hasMany('News as Newss', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $this->hasMany('Quote as Quotes', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $this->hasMany('Banner as Banners', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $this->hasMany('SiteMenu as SiteMenus', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $this->hasMany('Contact as Contacts', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $this->hasMany('SiteSetting as SiteSettings', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $this->hasMany('SiteTransUnit as SiteTransUnits', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}