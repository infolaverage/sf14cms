<?php

/**
 * BaseQuote
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $site_id
 * @property string $title_general
 * @property string $title
 * @property string $filename
 * @property clob $description
 * @property clob $content
 * @property boolean $is_active
 * @property boolean $is_translated
 * @property string $author_name
 * @property string $author_location
 * @property string $author_url
 * @property string $html_title
 * @property string $meta_title
 * @property clob $meta_description
 * @property clob $meta_keywords
 * @property string $meta_robots
 * @property Site $Site
 * 
 * @method integer getSiteId()           Returns the current record's "site_id" value
 * @method string  getTitleGeneral()     Returns the current record's "title_general" value
 * @method string  getTitle()            Returns the current record's "title" value
 * @method string  getFilename()         Returns the current record's "filename" value
 * @method clob    getDescription()      Returns the current record's "description" value
 * @method clob    getContent()          Returns the current record's "content" value
 * @method boolean getIsActive()         Returns the current record's "is_active" value
 * @method boolean getIsTranslated()     Returns the current record's "is_translated" value
 * @method string  getAuthorName()       Returns the current record's "author_name" value
 * @method string  getAuthorLocation()   Returns the current record's "author_location" value
 * @method string  getAuthorUrl()        Returns the current record's "author_url" value
 * @method string  getHtmlTitle()        Returns the current record's "html_title" value
 * @method string  getMetaTitle()        Returns the current record's "meta_title" value
 * @method clob    getMetaDescription()  Returns the current record's "meta_description" value
 * @method clob    getMetaKeywords()     Returns the current record's "meta_keywords" value
 * @method string  getMetaRobots()       Returns the current record's "meta_robots" value
 * @method Site    getSite()             Returns the current record's "Site" value
 * @method Quote   setSiteId()           Sets the current record's "site_id" value
 * @method Quote   setTitleGeneral()     Sets the current record's "title_general" value
 * @method Quote   setTitle()            Sets the current record's "title" value
 * @method Quote   setFilename()         Sets the current record's "filename" value
 * @method Quote   setDescription()      Sets the current record's "description" value
 * @method Quote   setContent()          Sets the current record's "content" value
 * @method Quote   setIsActive()         Sets the current record's "is_active" value
 * @method Quote   setIsTranslated()     Sets the current record's "is_translated" value
 * @method Quote   setAuthorName()       Sets the current record's "author_name" value
 * @method Quote   setAuthorLocation()   Sets the current record's "author_location" value
 * @method Quote   setAuthorUrl()        Sets the current record's "author_url" value
 * @method Quote   setHtmlTitle()        Sets the current record's "html_title" value
 * @method Quote   setMetaTitle()        Sets the current record's "meta_title" value
 * @method Quote   setMetaDescription()  Sets the current record's "meta_description" value
 * @method Quote   setMetaKeywords()     Sets the current record's "meta_keywords" value
 * @method Quote   setMetaRobots()       Sets the current record's "meta_robots" value
 * @method Quote   setSite()             Sets the current record's "Site" value
 * 
 * @package    s14cms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseQuote extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('quote');
        $this->hasColumn('site_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('title_general', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('filename', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('content', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_translated', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('author_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('author_location', 'string', 511, array(
             'type' => 'string',
             'length' => 511,
             ));
        $this->hasColumn('author_url', 'string', 511, array(
             'type' => 'string',
             'length' => 511,
             ));
        $this->hasColumn('html_title', 'string', 1023, array(
             'type' => 'string',
             'length' => 1023,
             ));
        $this->hasColumn('meta_title', 'string', 1023, array(
             'type' => 'string',
             'length' => 1023,
             ));
        $this->hasColumn('meta_description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('meta_keywords', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('meta_robots', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Site', array(
             'local' => 'site_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'description',
              2 => 'content',
              3 => 'is_translated',
              4 => 'author_name',
              5 => 'author_location',
              6 => 'author_url',
              7 => 'html_title',
              8 => 'meta_title',
              9 => 'meta_description',
              10 => 'meta_keywords',
              11 => 'meta_robots',
             ),
             ));
        $sluggable1 = new Doctrine_Template_Sluggable(array(
             'unique' => false,
             'fields' => 
             array(
              0 => 'title',
             ),
             'canUpdate' => true,
             'builder' => 
             array(
              0 => 'Project',
              1 => 'slugify',
             ),
             ));
        $i18n0->addChild($sluggable1);
        $this->actAs($timestampable0);
        $this->actAs($i18n0);
    }
}